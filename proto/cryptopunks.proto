syntax = "proto3";

package eth.cryptopunks.v1;


message Transfers {
  repeated Transfer transfers = 1;
}

message Transfer {
  string from = 1;
  string to = 2;
  uint64 token_id = 3;
  string wrapped = 4;
  string trx_hash = 10;
  uint64 block_number = 11;
  uint64 timestamp = 12;
  uint64 ordinal = 100;
}

message Assigns {
  repeated Assign assigns = 1;
}

message Assign {
  string to = 1;
  uint64 token_id = 2;
  string trx_hash = 10;
  uint64 block_number = 11;
  uint64 timestamp = 12;
  uint64 ordinal = 100;
}

message Sales {
  repeated Sale sales = 1;
}

message Sale {
  string from = 1;
  string to = 2;
  uint64 token_id = 3;
  string amount = 4;
  string trx_hash = 10;
  uint64 block_number = 11;
  uint64 timestamp = 12;
  uint64 ordinal = 100;
}

message Bids {
  repeated Bid bids = 1;
}

message Bid {
  string from = 1;
  uint64 token_id = 3;
  string amount = 4;
  string open = 5;
  string trx_hash = 10;
  uint64 block_number = 11;
  uint64 timestamp = 12;
  uint64 ordinal = 100;
}

message Asks {
  repeated Ask asks = 1;
}

message Ask {
  string from = 1;
  string to = 2;
  uint64 token_id = 3;
  optional string amount = 4;
  string open = 5;
  string trx_hash = 10;
  uint64 block_number = 11;
  uint64 timestamp = 12;
  uint64 ordinal = 100;
}


message UserProxies {
  repeated UserProxy user_proxies = 1;
}

message UserProxy {
  string user = 1;
  string proxy_address = 2;
  string trx_hash = 10;
  uint64 block_number = 11;
  uint64 timestamp = 12;
  uint64 ordinal = 100;
}

message Events {
  repeated Event events = 1;
}

message Event {
  oneof type {
    Assign assign = 1;
    Ask ask = 2;
    Bid bid = 3;
    Transfer transfer = 4;
    Sale sale = 5;
  }
}